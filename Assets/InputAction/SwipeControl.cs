//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAction/SwipeControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SwipeControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SwipeControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SwipeControl"",
    ""maps"": [
        {
            ""name"": ""SwipeDetection"",
            ""id"": ""b458a0b4-059d-41e1-b95b-0858f87b8b29"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""2dc526c5-3c8a-4e99-b376-a9ae72b314b5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Press"",
                    ""type"": ""Button"",
                    ""id"": ""60f868dd-f1c4-44e0-95cb-39db877e4db7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b0f9c99d-342e-499e-95bc-9ad07865845f"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f34eb6f0-380d-43ec-b1bd-bc714ebe817b"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Press"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SwipeDetection
        m_SwipeDetection = asset.FindActionMap("SwipeDetection", throwIfNotFound: true);
        m_SwipeDetection_Position = m_SwipeDetection.FindAction("Position", throwIfNotFound: true);
        m_SwipeDetection_Press = m_SwipeDetection.FindAction("Press", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SwipeDetection
    private readonly InputActionMap m_SwipeDetection;
    private List<ISwipeDetectionActions> m_SwipeDetectionActionsCallbackInterfaces = new List<ISwipeDetectionActions>();
    private readonly InputAction m_SwipeDetection_Position;
    private readonly InputAction m_SwipeDetection_Press;
    public struct SwipeDetectionActions
    {
        private @SwipeControl m_Wrapper;
        public SwipeDetectionActions(@SwipeControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Position => m_Wrapper.m_SwipeDetection_Position;
        public InputAction @Press => m_Wrapper.m_SwipeDetection_Press;
        public InputActionMap Get() { return m_Wrapper.m_SwipeDetection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SwipeDetectionActions set) { return set.Get(); }
        public void AddCallbacks(ISwipeDetectionActions instance)
        {
            if (instance == null || m_Wrapper.m_SwipeDetectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SwipeDetectionActionsCallbackInterfaces.Add(instance);
            @Position.started += instance.OnPosition;
            @Position.performed += instance.OnPosition;
            @Position.canceled += instance.OnPosition;
            @Press.started += instance.OnPress;
            @Press.performed += instance.OnPress;
            @Press.canceled += instance.OnPress;
        }

        private void UnregisterCallbacks(ISwipeDetectionActions instance)
        {
            @Position.started -= instance.OnPosition;
            @Position.performed -= instance.OnPosition;
            @Position.canceled -= instance.OnPosition;
            @Press.started -= instance.OnPress;
            @Press.performed -= instance.OnPress;
            @Press.canceled -= instance.OnPress;
        }

        public void RemoveCallbacks(ISwipeDetectionActions instance)
        {
            if (m_Wrapper.m_SwipeDetectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISwipeDetectionActions instance)
        {
            foreach (var item in m_Wrapper.m_SwipeDetectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SwipeDetectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SwipeDetectionActions @SwipeDetection => new SwipeDetectionActions(this);
    public interface ISwipeDetectionActions
    {
        void OnPosition(InputAction.CallbackContext context);
        void OnPress(InputAction.CallbackContext context);
    }
}
